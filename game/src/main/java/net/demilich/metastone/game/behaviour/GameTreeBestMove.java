package net.demilich.metastone.game.behaviour;

import net.demilich.metastone.game.Attribute;
import net.demilich.metastone.game.GameContext;
import net.demilich.metastone.game.Player;
import net.demilich.metastone.game.actions.ActionType;
import net.demilich.metastone.game.actions.GameAction;
import net.demilich.metastone.game.behaviour.heuristic.IGameStateHeuristic;
import net.demilich.metastone.game.cards.Card;
import net.demilich.metastone.game.entities.heroes.Hero;
import net.demilich.metastone.game.entities.heroes.HeroClass;
import net.demilich.metastone.game.entities.minions.Minion;
import net.demilich.metastone.game.logic.GameLogic;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;

public class GameTreeBestMove extends Behaviour {

	// 使用Batch CEM, batchSize = 25; updateBatchSize = 20; topRatio = 0.25; 总局数 10000， 随机初始化N(0,0.25)， 逐渐减小的Noise: Math.max(0.1 - 0.01*iterNum, 0);
	//	############### 搜索深度 depth=2, 针对 70.4%的Greedy Best Move Linear进行优化，耗时接近5个小时, 10000局训练整体胜率 63.06%
	// 下面涉及GameTree搜索的都是100局胜率评估，可能不是很准确
	// iterNum=10时的bestPara，胜率24/25， VS Greedy Best Move 胜率：53%   VS 70.4%的Greedy Best Move Linear 胜率：46% （看来训练前期出现的24/25纯属偶然？）
//	double[] parWeight = {0.05732746865866716, -0.18140247230331047, 0.49975087073441615, 0.6473297638123358, -0.3414953192020501, 0.24758057657231658, -0.9864847025723429, 0.2025830857591307, 1.866557562088892, 0.28427872933054543, 0.28948916166271144, -0.22973753810461392, 0.21812337670778814, -1.1181972463287209, -0.26649525786320616, 0.7110708179033914, 0.6045896465264924, -0.16497316503369025, -0.5899631090184629, -0.27251239686828366, -1.029097112797488, -0.9911979194986152, -0.7430061296137774, -1.0677017071084236, -1.1183810574140896, -2.253374039215773, -1.9083246948553652, 1.8136208540273824, -0.9595916060427558, 0.8496532406887332};
	// （Good，经李宁测试）iterNum=17时的bestPara，胜率24/25， VS Greedy Best Move 胜率：71%，  VS 70.4%的Greedy Best Move Linear 胜率：73%，  VS 默认GameStateValue 胜率 58% (还是后期的结果更加靠谱,看来不能前期随便停止)
//	double[] parWeight = {-0.037847876197846936, -0.5793008001169108, 0.1754385206469534, 0.1946006596220002, -0.18375281281268818, 0.07669337304029306, -0.23953339605248733, 0.1625375821028113, 0.9683292339344448, 0.44773851443668594, 0.47734256985078316, -0.21879857542089906, 0.39121568056816125, -0.6008596281153088, -0.05693259780075566, -0.2351841449032277, 0.5748925305480416, -0.3515842748443804, -1.2271003656222081, 0.13591035827512069, -1.161462138557064, 0.3489161472204509, -1.1059219462733827, -0.7285302999093869, -0.6625790473565222, -0.8504436668103094, -1.4268205997337957, 1.6023593638999283, -1.0209016644769786, 0.724077140200281};
	// iterNum=20时的paraMean，胜率24/25， VS Greedy Best Move 胜率：76%，  VS 70.4%的Greedy Best Move Linear 胜率：67% （不稳定，出现过46%）， VS 默认GameStateValue 胜率 57%
//	double[] parWeight = {-0.01894108346479285, -0.6498351778764011, 0.2536971763176777, 0.33389224352734104, -0.42517333447394323, 0.07130314047914921, -0.17081333968834544, 0.12590660310554186, 1.5373426654938487, 0.5300651514439202, 0.4571980814872247, -0.2488889858109417, 0.3780320074483211, -0.44492566022161545, -0.11257660963744213, -0.077281489903719, 0.5254987663583898, -0.39287559962305496, -1.2106529117519496, -0.10809080305564531, -1.1197048368776241, 0.3586802266233625, -1.1308642739906707, -0.8548343728001531, -0.78415772506409, 0.6326704845661801, -1.4211089028231494, 1.1706341725914826, -0.9648905065005593, 0.8828072821175915};

	//############## 搜索深度 depth=2, 针对 默认GameStateValue进行优化， 20000局训练整体胜率 60.1%， 耗时7小时 (训练后期似乎没有提升了，另外因为训练对手的问题，看来对Greedy Best Move Linear的效果不好)
	// 发现搜索深度2训练出来的Good权重参数，如果在深度=0的情况下使用，效果很差 （VS Greedy Best Move 胜率：41%） 在深度=1的情况下使用，效果就蛮好了 （VS Greedy Best Move 胜率：73.6%  VS 默认GameStateValue 胜率 62%） 到深度=3时就很慢了，而且效果不一定好，VS 默认GameStateValue 胜率 58%
	// iterNum=8时的paraMean， VS Greedy Best Move 胜率：76%，  VS 70.4%的Greedy Best Move Linear 胜率：48% (这个有点低)， VS 默认GameStateValue 胜率 62%
//	double[] parWeight = {-1.226919005119356, -1.3227033979794256, 0.17763259677863705, -0.08237331929316685, -0.457575124812566, 1.0927324952374549, 0.35327714542210875, 0.22832997386358586, 1.8928013135630875, 1.0346298094797615, 1.6232944944396273, -0.46135852155964896, 0.5891938490070523, 0.17416572738255837, -0.3853550503769568, -0.2478716674268691, -0.14910526039726751, -0.9496741917424874, -1.386914090717463, 0.7264749572085489, -0.9283393857491135, 1.0797466731215932, -1.615008830787571, -1.315612050534872, -0.9684252134277124, -1.715006877825872, -1.5468996682627372, 2.125640263354073, -1.853508543161519, 0.6546139732540672};
	// iterNum=17时的bestPara，胜率23/25， VS Greedy Best Move 胜率：78%，  VS 70.4%的Greedy Best Move Linear 胜率：49%，  VS 默认GameStateValue 胜率 67%
//	double[] parWeight = {-0.48469589039385513, -1.4684344617708704, 0.886127246379373, 0.084134615594126, -2.9644129861724164, 1.0513313555679613, 0.08836642429330685, 0.15039803188925688, 2.2465998409753105, 1.219211422282237, 1.6201865898349233, -1.1384751140169822, 0.7608525325504604, -0.46791253208051314, -0.46592274880871076, -0.11825161732636086, 0.10443713883125631, -1.5279211971327136, -1.521842549508122, 1.1116409003914722, -1.916601171918681, 4.80137229649976, -1.5485629480590233, -1.3178461619772845, -0.7165173865020682, -2.111629065394186, -1.5505750604956616, 1.1966735209761712, -2.1063005623882307, 0.6555461603903561};
	// （Good）iterNum=22时的paraMean， VS Greedy Best Move 胜率：76%，  VS 70.4%的Greedy Best Move Linear 胜率：56% ， VS 默认GameStateValue 胜率 70%  （综合来看这个不错，选择的时候看来要选rewardMap整体分布好的，最低reward大的）
	// ###### 重大发现！！！！###### 这个depth=2的参数换了 Wild Pirate Warrior卡组，甚至是换职业到Hunter或Druid，效果依然远远好于Greedy Best Move， 比默认GameStateValue可能稍差，这是预料之外的
//	double[] parWeight = {-0.4026557850528921, -1.4777779620148956, 0.4807519990112861, 0.17256270698849252, -3.0048219754608025, 1.2471351008867102, 0.0984930660725887, 0.10428128567415333, 2.305958663224414, 1.1694585122714134, 1.6161794705279806, -1.2488627310061495, 0.7849320841015818, -0.44585583054203787, -0.5739923937489321, -0.15309219515362008, 0.10443397417923186, -1.6386810620082035, -1.5720069467333566, 1.142923451103324, -1.8273642125940401, 3.9607177425623874, -1.5590593357541482, -1.8584667661464103, -0.7176115097989136, -1.9578732692028225, -1.555219474560269, 1.260854506957219, -2.110174979376178, 0.6617734109303619};
	// iterNum=40时的bestPara，胜率22/25， VS Greedy Best Move 胜率：69%，  VS 70.4%的Greedy Best Move Linear 胜率：49%，  VS 默认GameStateValue 胜率 68%
//	double[] parWeight = {-0.3911919433803114, -1.4764118363727834, 0.39562263892652444, 0.17872383016311882, -3.028344659422104, 1.2784718432230882, 0.09464033220057197, 0.09754508671550316, 2.2806440882368633, 1.217281242319537, 1.6172127669471419, -1.273450593722082, 0.7768778476982692, -0.49534794757244266, -0.5727578785175892, -0.1409913552161238, 0.1047117028305755, -1.6763465139003637, -1.5725574835718972, 1.1426922818699154, -1.8296914059828693, 4.71578277486832, -1.5557188194644007, -1.7630146582129207, -0.7100529487019973, -1.865291420930733, -1.5383752324035105, 1.1361230085536875, -2.0290841407760647, 0.6808540184893374};

	// ############## 开始使用更加实际的 Wild pirate warrior卡组进行训练，针对默认GameStateValue进行优化，搜索深度 depth=2， 使用初始的30个基本特征
	// iterNum=17， bestPara, 针对默认GameStateValue 胜率 57%
//	double[] parWeight = {0.2531123202025356, -0.9982418351898339, 1.9116695261667112, 0.03953481255073177, -4.216036866508768, 0.8255455868673107, 1.000288432433256, -0.9415770308409647, 1.7073616003019094, 1.2725619167036244, 1.3880639927026635, -1.5684675033015834, -1.2849437973654652, -1.528776080966762, -0.3153725625425949, -1.1369953484333835, 0.9586242368431731, -0.535716315375368, -1.3028241947239345, 0.6299428930468279, -1.0246541115059027, 4.268017846307161, -1.4733436076046798, -1.611960804789615, -1.4093757996463727, -1.17645552074927, -1.5800369230407565, 2.0710109847781824, -2.567594924365689, -0.48188478643192506};
//	 iterNum=25, bestPara, 针对默认GameStateValue 胜率 59.5% (重复跑了几次，也就55%左右)
//	double[] parWeight = {0.25575116520627184, -0.9278536019111282, 2.1216604332338913, 0.04267043943699314, -4.075263003342301, 0.9060900965983106, 1.0063030804051973, -0.9108991565442115, 1.5451596180487752, 1.2663599848897307, 1.3710628557586126, -1.5852067035868875, -1.2807065891304568, -1.4890593478166567, -0.4793224359429716, -1.1496468203840677, 0.8428748646414284, -0.5304836348374388, -1.165913286667362, 0.5828361349956391, -1.0110595051063738, 4.287534384361342, -1.2472509809725094, -2.162084194048225, -1.4108483107037244, -1.1697072287108503, -1.7390531857278464, 2.0695021567865797, -2.716171598060022, -0.46783760881114284};
//	 iterNum=26, bestPara, 针对默认GameStateValue 胜率 55%
//	double[] parWeight = {0.2558370621170161, -0.9609865165281571, 2.09950994158724, 0.0458944109560219, -4.092836340009819, 0.9173393395909678, 1.007279669903067, -0.9072913938909399, 1.572290481206532, 1.260044465828418, 1.3791041845597323, -1.5702528192593819, -1.2829175874468794, -1.4354296758577214, -0.38310367063277645, -1.149824706229203, 0.8418437087448428, -0.5425160020218078, -1.1889432554913166, 0.5751479343828461, -1.0127087815212203, 4.2885690862856665, -1.26472980997415, -2.128828997059943, -1.4110601724858263, -1.177220035593748, -1.7854215497963957, 2.069940865183838, -2.669145964433656, -0.4710040873762314};
	// iterNum=38, bestPara, 针对默认GameStateValue 胜率 55%
//	double[] parWeight = {0.24555599854586083, -0.9526471991340034, 1.9801299025958938, 0.04332558768026285, -4.040279824385586, 0.9110531536696108, 1.0112132593216325, -0.9046878201034395, 1.6036890257953313, 1.2605868072021809, 1.357712309875337, -1.55920502958487, -1.2825563375006965, -1.461956396038969, -0.4934489308076805, -1.1490899800899954, 0.8392857637698954, -0.541175626711127, -1.1969715774142693, 0.49861808979519756, -1.0121436930065255, 4.290354642925581, -1.1721360041179674, -2.135430355481464, -1.4109025668038848, -1.181281802195749, -1.7799349168391982, 2.0734048167924257, -2.657838250583937, -0.4711894093551854};

	// ######################## 特征大扩展到88个，增加随从的各种技能特征，如嘲讽、风怒、冻结等等，也增加武器攻击、耐久等特征 ###############################
	// ####################### 使用 Wild pirate warrior卡组进行训练，针对默认GameStateValue进行优化，搜索深度 depth=2 ##########################
	// iterNum=11, bestPara, 针对默认GameStateValue 胜率 55.5%, 对 Greedy Best Move 胜率 97%  （下面的胜率评估都是随机200局的结果）
//	double[] parWeight = {-0.07103707450677957, 0.39564519200409753, -1.242508031676314, 0.5766920645060912, 0.5517316750422674, 1.087100713388673, 0.2782518257911362, 0.6855722732698842, -1.388707873826581, -1.271006220523324, 0.9670263790327637, 0.6094031965504108, 0.24391163531654347, 0.26211360033281533, -0.15160648601249982, -1.0899389006628142, -0.03219647528914782, 0.26354865224672336, 0.185310698937866, 0.5393043290373792, 1.1694734907037603, -0.4120360357931014, 1.91529969781979, -0.2804869317323049, -2.016009988878115, 0.4459843871487358, 0.22635986218738796, 0.07100149092207408, -0.9081550590470383, 0.22558552078865612, -0.9506228032935895, -0.2778107355235946, -0.3312130613326187, -0.337843127590343, -0.05080045571031558, -1.0197481563669304, 0.6275583798397925, -1.7143933343313955, -0.695964265508372, -0.2296404940201889, 0.277039321104856, 1.0613177160385328, 1.6791104096905969, -0.911725875878305, -0.15632176569098488, -0.6339964290507436, 0.6763066802846818, -1.564525884871963, -0.37057374086984507, -0.29785324775168937, -1.5004124716994212, 0.8186416436478934, -0.33864237276638554, -1.7717810429703653, -0.396968056434088, -0.07669408397272809, -0.6418822415106458, -0.9591696293269185, 0.6286896653804916, -1.2566884901395856, 1.5166461223312868, -0.19615619520596653, -0.32067896090610143, 0.46347662484023433, -0.22712683113232232, -0.6004200338713632, -0.809611101596797, 0.22085930224500366, 0.5687765434469121, 0.12895811173293084, 0.5523938288392505, 0.25238651799382583, -0.4463799516754793, 0.4859445804859011, 0.4454014150712484, -0.9830484845910167, -0.2103426558111179, 0.4492070725021964, 0.606321533690112, -0.9852254205197175, 0.480852670477006, 0.1925558399913696, -0.13635179140057418, -0.15019015479715023, -0.9437807984550957, -0.29951180242124886, 0.5113543788593151, 1.362439415431286};
	// iterNum=10, ParaMean, 针对默认GameStateValue 胜率 56.5%
//	double[] parWeight = {-0.10914366325795763, 0.5499153405387595, -1.0056816742770942, 0.5679066784902266, 0.22572317538669137, 0.7569117351028953, 0.031090223903131497, 0.5948143318102023, -1.6408563516133623, -0.5030324239339852, 0.7714242693161015, 0.5973176348034501, 0.13108385590035537, 0.4723841244903049, -0.11482968813648138, -1.1762875488676279, -0.8870647706596714, 0.20843368164132814, 0.21181574282584537, -0.027776847636889857, 1.225133670044487, -0.4176850644978004, 0.9759306662163644, -0.25321195498396687, -1.6354250574369942, 0.49562518244901205, 0.360242988693158, -0.4389519670666512, -1.0233063534961828, -0.0776956293599365, -0.2822725974028225, -0.3661155614520356, -0.004262360856230152, -0.260713859225426, -0.08145768821434349, -1.064244147821679, 0.6528026417404013, -1.4092148044645072, -0.15626135284132356, 0.013867689672995277, 0.39038116075909024, 1.328310188265593, 1.8488364036210936, -0.7159139850413819, -0.10645620421367641, -0.6255621128780878, 0.4221648433717463, -0.2738667779997428, -0.22323819106250747, 0.06907447461071525, -1.1567480671984773, 0.6549605101901431, -0.5390912616978103, -1.6274276940574643, -0.4084750958713535, -0.015028833585417001, -0.8187054529715742, -1.302294525290796, 0.06540819996033118, -1.2672817680688953, 1.566037820724829, -0.1676611238769868, -0.6848306317144978, 0.021473017295027142, -0.2733319080925856, -0.5144265623558519, -0.5286005453942575, 0.14536373931020455, 0.43053362100371917, 0.18704273483054112, 0.13880520559542564, 0.9698237999251621, -0.4979086616255362, 0.1748434615232814, 0.2967656395531152, -1.166568481168523, -0.2637274662594512, 0.8209120162458005, -0.20417373129700636, -0.8829143087427991, 0.6192902754241582, 0.1358085064867311, 0.4214205915991043, -0.12570660884946214, 0.11559140434190666, -0.44882476144467115, 0.3254328707155658, 1.4614393839230957};
	// iterNum=14, bestPara, 针对默认GameStateValue 胜率 59%
//	double[] parWeight = {-0.06842227855704575, 0.531395193017131, -1.0237071115166314, 0.9821571580465394, 0.185583501483411, 0.6657046377177561, 0.03562111707461457, -0.4218381996822439, -1.8079308339992806, -0.25637747115238557, 0.7881280650300405, 0.6499609401451998, 0.13114019188114542, 0.20319900674440544, 0.3167113992148181, -1.2744903304208455, -1.3669345675224673, 0.046728040972776996, 0.2708976063685543, 0.3977754567514053, 1.2581224961519109, -0.376983121364032, 0.20059919709259455, -0.372087309126495, -1.86983490950896, 0.4450260534544188, 0.3758662431038682, -0.2912499305003001, -1.1358043620466114, -0.20034112084448416, -0.038148941812400805, -0.37431246793318296, -0.5176573109558864, -0.36369164742061055, -0.05572910997283402, -1.0556208262920184, 0.6558209773330775, -1.8459878123586104, -0.49857302358945177, -0.03154582971733494, 0.3230048623010618, 0.9086817836612316, 1.7780248567097867, -0.8982777033369852, -0.18193294851846475, -0.6001857123632405, 0.28918810868074873, -0.6189550554343664, -0.35261025014866965, -0.0862640413431992, -1.557401520601084, 0.8310127369123876, -0.1957033845158776, -1.9493556752404122, -0.4203555298533814, 0.08138732462338713, -0.9012619656275546, -0.7950633642092364, 0.4716458987193438, -1.1585619236929074, 1.6346489344236828, -0.19774345594686327, -0.3112119524050294, 0.09923640618809476, -0.3796418070076693, -0.38638200749516294, -1.072516706896448, 0.02765765592907579, 0.47424436441398776, 0.22117760815015108, 0.4117108624794332, 0.3039364915720735, -0.43160395802412144, -0.3801268236018796, 0.3546727934021904, -0.9318027621082401, -0.2570926266402941, 1.2018749994471314, -0.6847618466780394, -0.9063228996072069, 0.7204495644343104, 0.15082596633864587, -0.344207423606857, -0.19826359298248367, 0.7043543477033599, -0.4406596408578044, 0.3766990379464057, 1.5601270342576743};
	// iterNum=16, bestPara, 针对默认GameStateValue 胜率 61.5%  胜率 61.5%  胜率 53.5%  胜率 50% （很不稳定的样子）
//	double[] parWeight = {-0.049246478000466935, 0.4824399137875914, -2.5139087510788736, 0.6231379713182994, 0.14687008026304638, 0.650837233682471, 0.04988444926138969, 0.45626762842554763, -1.524924051143562, -0.856548337526593, 0.7699859732129024, 0.5960179010611457, 0.13633436008323477, 0.14221964601980855, -0.28684356054627547, -1.2610907206827933, -0.45054417539496816, 0.08452081530679961, 0.20731967608268648, 0.3196438179764997, 1.3051473790561394, -0.458283769958828, 0.24948400620987754, -0.2372212583615657, -1.1864154728588612, 0.44019271925830933, 0.5882643184425553, -0.5849962452182628, -1.1591896859716035, -0.23828783656700264, -0.373423386163382, -0.3578686646974568, -0.12908847489145858, -0.5231861385061187, -0.09585077007528978, -1.032773027665446, 0.6131361625531436, -1.5200214443708788, -0.2622221185541382, -0.1220508270318424, 0.4021425890843698, 1.3332863283082204, 1.7878517877126, -0.8889580388312162, 0.06602865414243701, -0.5253514298380115, 0.2553199692410566, 1.6444233320116792, -0.3896369503591405, 5.233988024754277E-4, -0.7384151448336376, 0.7809940586084735, -0.06160863262597685, -2.1223111644346577, -0.4791307419600547, 0.08257063054976248, -0.6887360660773874, -0.693508777950431, 0.36495977075432173, -1.4163249720406756, 1.561580432285362, -0.2261669110253979, -0.6046160356371735, 0.5023017040646455, -0.25635459220151574, -0.48623122640890837, -0.6907796890395878, 0.08232777008826109, 0.43156384561246325, 0.2003003012566852, 0.6292223046321401, 0.08697841305943105, -0.43702172054170885, 0.29410348309886464, 0.40318576924438737, -1.5621450166654658, -0.2660562841379354, 0.96201148115281, -0.6245297513383935, -0.8030126592026815, 0.7711191159660943, 0.22256871146494078, -0.43636818988102755, -0.20500697333198611, 0.19099251217713925, 0.036202801597311596, 0.32559288370432826, 1.5363620141653456};
	// iterNum=16, ParaMean, 针对默认GameStateValue 胜率 56.5%
//	double[] parWeight = {-0.05249627430672692, 0.46017206090270973, -0.8575694132946726, 0.9799338278414487, 0.14262646136234386, 0.7073511851468735, 0.01535571398652997, 0.40203439013582737, -1.2926206358582732, -0.60670779054112, 0.8264747765637079, 0.5983912027052478, 0.10946702735918065, 0.14586323626875258, -0.1832537043738749, -1.3063332969549513, -0.567994723775491, 0.08009665717270137, 0.2127367279646149, 0.36474503175382333, 1.304763725558113, -0.43591390061740143, 0.8384463349987756, -0.2767764351253811, -1.6172631710232, 0.4417847722658368, 0.5212269314066705, -0.40152826184063056, -0.9867271918464059, -0.1866228201615078, -0.1772464702241426, -0.31079823525103245, 0.016547568193930738, -0.279900877751545, -0.09848168571289648, -1.0357349199915078, 0.6495976852712595, -1.575203919655626, -0.40954736764206795, -0.19524053531735555, 0.3487223513822107, 1.1639799863294849, 1.7895793737497605, -0.8133950675646195, 0.0034625568570355583, -0.5308498600987719, 0.27427297343939294, 1.1412751022158933, -0.31181486674492964, -0.09975268548315055, -0.8407474878056718, 0.7488154411836427, -0.08751407067625833, -1.8888555376047627, -0.45884955426819785, 0.19970523910302967, -0.6874952221252897, -0.5662444065879623, 0.49017917277876955, -1.2033362624208008, 1.5444967810298003, -0.20712171325441556, -0.7526484223054382, 0.38871672626214304, -0.36097282070891346, -0.3719325573936122, -0.7866453783603597, 0.002870074498074448, 0.3991850724112533, 0.21935687990965924, 0.5015344133739932, 0.4860159413543094, -0.4435025803075524, 0.2802118896653701, 0.40047538582552694, -1.4854391234890585, -0.3550983613018527, 1.143766211008633, -0.9167449908754097, -0.8559921509566172, 0.9553792302642515, 0.2319896148994615, -0.46112105977784507, -0.0024546749920275612, 0.150584391270651, -0.24904290404993126, 0.3261931153114942, 1.4677798810997884};
	// iterNum=22, bestPara, 针对默认GameStateValue 胜率 59.5%
//	double[] parWeight = {-0.05211572700620054, 0.40453120755895927, -0.5187942406180238, 1.0612720869777998, 0.18498202033443983, 0.7032863137701039, -0.07117800423662018, -0.1861271507145117, -1.419035755238697, -0.6020181835296211, 0.7871187341990223, 0.5998344690100309, 0.1182706529329553, 0.20836731961478505, -0.14618415570423365, -1.2834825481600878, -0.7522957070006234, 0.09631574523067828, 0.21890806603651922, 0.23439704805425343, 1.3257468811371098, -0.48484560759208695, 0.2891720864343859, -0.2708976520837716, -1.1779322434695954, 0.44934276789950517, 0.40957478635107464, -0.41461426399892204, -0.6645706877887608, -0.26926458941790793, -0.08139116209750372, -0.29987671190828413, -0.2767225437954224, -0.29846634211981016, -0.11549804388703555, -1.0312294470807806, 0.60236372840409, -1.5469314006713888, -0.43833536668840384, -0.23113840747768036, 0.33813393034077927, 1.0666719918046954, 1.7862784973552066, -0.6905268090180564, -0.00923161277781722, -0.5390429138032692, 0.28169369731773936, 1.5442130587275573, -0.4458154945575561, 0.16238639491158566, -0.6462567234794301, 0.7627338799731312, -0.09212157389162852, -1.9891736976293732, -0.4184213824523181, 0.2153538794574577, -0.7344402537034254, -0.735115842914292, 0.41264372542588573, -1.123745404587545, 1.5092105975785923, -0.22820820207810805, -0.3647607722849669, 0.22965586520983494, -0.34438936584373214, -0.35009928405986895, -0.628361280264325, -0.001894650781049765, 0.4010140819985648, 0.10606459119131713, 0.4910587507858615, 0.6132354314078874, -0.4517690277875886, 0.26471062991434013, 0.3989747118387457, -1.3246481814282782, -0.4102213176202249, 1.0714120772666418, -0.5406040259122269, -0.9106332572554301, 0.7910458162347441, 0.2373855448945067, -0.44991088017997993, -0.030704268638423213, 0.10651227492689627, -0.9754870951592858, 0.3302443252647904, 1.4758368118666583};
//	 iterNum=25, bestPara, 针对默认GameStateValue 胜率 61.5%  胜率 66.5%  胜率 61% （Good）
	double[] parWeight = {-0.042435191603752365, 0.40616696103829747, -0.6076077508888231, 0.7272720043082649, 0.20202105394258138, 0.6313194790542382, 0.018128759542628426, -0.6714877445764238, -1.4053075565764823, -0.5645665894497521, 0.7847370830575832, 0.6027815061309918, 0.11944932690773696, 0.16639617889671887, -0.596884142191235, -1.303442871303662, -0.7689279203049311, 0.08684843915912507, 0.2194776555521321, 0.3016746685481717, 1.2937229089380362, -0.3867675424274616, 0.1076755527545435, -0.2732232995785765, -1.2185303120526827, 0.44953477632896055, 0.4381595843767112, -0.42740268057811853, -0.7593509953652382, -0.25454178333555133, -0.06777467174623754, -0.29690084326922533, 0.139006279981216, -0.19757466435610388, -0.10281368164119024, -1.0318842806816224, 0.6697091092076944, -1.5504887549148079, -0.46513049548185065, -0.224168675085325, 0.3363897344845124, 1.0077572813673379, 1.790712443198513, -0.7974532011373017, -0.034379835513210874, -0.53728431299419, 0.27911211300832656, 1.77296275442259, -0.49676110743592145, 0.1543295718827667, -0.8465960481972349, 0.7616942260912617, -0.09467554276581093, -2.0242808280175053, -0.42044884895501194, 0.22098060325157623, -0.7124548934850738, -0.46505479523846677, 0.48943013064063173, -1.0814450906779396, 1.494202436696506, -0.2253465154462635, -0.45375551865466784, 0.23376970921025383, -0.31330715778322343, -0.36119276257174077, -0.643335795514266, -9.750616593995213E-4, 0.38910933337215503, 0.09884268820871578, 0.37335447500509883, 0.8047764493080031, -0.4720077472112548, 0.264490464098162, 0.4104466046033848, -1.3686731855897478, -0.3840621668768126, 1.0668114179340098, 0.2664341808467372, -0.9317865799520276, 0.7754792723230315, 0.23662829519630627, -0.4460817116862948, -0.010734604936549205, 0.08007887984653188, -0.7490589136711456, 0.32186845493246313, 1.4714419204754288};
	// iterNum=31, bestPara, 针对默认GameStateValue 胜率 62.5%  胜率 65.5%  胜率 58%
//	double[] parWeight = {-0.046213050267492464, 0.4342703951207023, -0.49781201023387817, 0.8437570953149934, 0.20770599795742795, 0.6574730259915661, 0.007998987563182477, -0.5566659721623878, -1.5109955061082214, -0.5915271625271918, 0.7834250538256503, 0.6005883754781176, 0.11896266574973054, 0.1955039987993421, -0.4284538392845146, -1.317054449762594, -0.6925468201911233, 0.10462854840765501, 0.21739503893636222, 0.2942665670387469, 1.3039349833731047, -0.44462215439439046, 0.11554390453977183, -0.2819045442367427, -1.2217370333198556, 0.44735625409637536, 0.4255539125121843, -0.4251397936845355, -0.7419260933698898, -0.20171625429381135, -0.08247871822333533, -0.29455626427054027, 0.0544077396406184, -0.4127762691151836, -0.09846537339621078, -1.0318717313188492, 0.690733116458032, -1.550341524796915, -0.42821245438787725, -0.22879519138224355, 0.35331557853319867, 1.0553549115562695, 1.7888955704931917, -0.722469895371181, -0.03966377737789866, -0.5449104322175602, 0.27832578691486903, 2.1172860511498612, -0.4745297895107765, 0.16406834099091996, -0.6822413936070714, 0.7629291486234225, -0.09466792343846281, -2.005861669511064, -0.41537958562121136, 0.2281423313625167, -0.6951680263314735, -0.46917960494888755, 0.4811553136467787, -1.1577626893003625, 1.476703365125417, -0.2207451769047674, -0.44624558320178476, 0.24368504937764932, -0.3193319358645461, -0.36293990148198363, -0.6750462815847764, -0.0019577007025410736, 0.38383543978138246, 0.09823152882389076, 0.3210662637147277, 0.7702820657991762, -0.4800408940467279, 0.26171603686382927, 0.41217504379033965, -1.4176415585155966, -0.39104656750395367, 1.0392250803995173, -0.2671928877285672, -0.9011787395772183, 0.7979339554060503, 0.2370451698337826, -0.44540066674923606, 0.01405567069526889, 0.14839061951357305, -0.7042397448860396, 0.33070530499510997, 1.4738462275242676};
	// iterNum=33, bestPara, 针对默认GameStateValue 胜率 62%   胜率 59.5%   胜率 62%
//	double[] parWeight = {-0.04491263006270403, 0.4430355404169877, -0.541961906820679, 0.853662003405448, 0.20768935579713177, 0.6608624320793993, -0.007635953654025766, -0.5557256132776426, -1.4991454022795976, -0.5910853168720751, 0.7822463975214621, 0.600630858373659, 0.11855163373655825, 0.20212683270767404, -0.1644133252027914, -1.3163132804977449, -0.6988432347259403, 0.11101634942933475, 0.2160082595066602, 0.29270585228297247, 1.2973419996622801, -0.4302494497114055, 0.11350723393924253, -0.2870004764706799, -1.2784902145024235, 0.44774701996978616, 0.4541778247153897, -0.3607908591806641, -0.7510495098927664, -0.17680810573896655, -0.08313106467203481, -0.29466683679607714, 0.030913976864863576, -0.49458493864520325, -0.09910080442828385, -1.0318302481774266, 0.6931205164330454, -1.5531232888423483, -0.42004071308880775, -0.2328981788700962, 0.34170751601438065, 1.0654441310158485, 1.7898665624912926, -0.7215008186094333, -0.03891921832930864, -0.5423927640424366, 0.27678285371398215, 3.3688006268575417, -0.4757232776016079, 0.17316680516123137, -0.698804197475573, 0.7625701384001784, -0.09534888166160956, -1.9987640409252847, -0.41732297316482747, 0.22853390786841823, -0.7112622778706371, -0.5382253001493109, 0.48563417441480916, -1.1577583962815328, 1.4937038981707922, -0.2103754699594113, -0.4452181325030424, 0.24220416263185982, -0.3285807313461618, -0.36477791715959834, -0.6792835552906953, -0.0019672145021382677, 0.383975826224685, 0.0989923861035451, 0.32583862267788694, 0.8190847609835166, -0.47980620463590684, 0.25971460254885825, 0.4126093149485891, -1.4171869743233207, -0.37986437615090873, 1.0376732820611005, -0.30451457785377023, -0.8782067333983004, 0.8012400488474171, 0.23736753808946548, -0.44673419333831466, 0.02192735100793302, 0.15244893396972153, -0.6958146017637838, 0.329611295891566, 1.4738087838756913};
	// 上面iterNum=25,31,33这3个参数的和， 胜率 58.5%   胜率 60%   胜率 60%
//	double[] parWeight = {-0.1336,1.2835,-1.6474,2.4247,0.6174,1.9497,0.0185,-1.7839,-4.4154,-1.7472,2.3504,1.8040,0.3570,0.5640,-1.1898,-3.9368,-2.1603,0.3025,0.6529,0.8886,3.8950,-1.2616,0.3367,-0.8421,-3.7188,1.3446,1.3179,-1.2133,-2.2523,-0.6331,-0.2334,-0.8861,0.2243,-1.1049,-0.3004,-3.0956,2.0536,-4.6540,-1.3134,-0.6859,1.0314,3.1286,5.3695,-2.2414,-0.1130,-1.6246,0.8342,7.2590,-1.4470,0.4916,-2.2276,2.2872,-0.2847,-6.0289,-1.2532,0.6777,-2.1189,-1.4725,1.4562,-3.3970,4.4646,-0.6565,-1.3452,0.7197,-0.9612,-1.0889,-1.9977,-0.0049,1.1569,0.2961,1.0203,2.3941,-1.4319,0.7859,1.2352,-4.2035,-1.1550,3.1437,-0.3053,-2.7112,2.3747,0.7110,-1.3382,0.0252,0.3809,-2.1491,0.9822,4.4191};

	// ####################### 使用 Face Hunter卡组进行训练，针对GameStateValue进行优化，搜索深度 depth=6, maxNumMoveSearched = 6 ##########################
	//	iterNum = 13, bestPara, GameTreePrune depth=6 训练的结果，直接在depth=2下测试，针对默认GameStateValue胜率 55%
//	double[] parWeight = {0.6374358844356491, 1.3486661639695385, -1.3001039811727821, 1.7699057654403103, -0.4536090766169081, 0.43756721643843133, 0.977808030431877, -0.39205612499428233, -0.9974823530191395, -0.49739281723953754, 1.059062389957353, 1.365633947018877, 2.136429410845871, 0.3651878882831061, -1.0333342140486341, -0.8243867231533103, -1.205460203284165, 0.6367805213748552, 0.36501559150419643, 2.1718387277638724, 1.844683428984823, 0.4347327640254902, -0.8943882283213155, 1.8352407316699846, -1.1166467816220278, 1.1740850406976056, 0.9765486891813979, -2.4232174392930395, -0.799976237166497, -0.1791006160896861, -0.38947385338466384, 0.35729501090122784, -1.0186628884367934, 1.4723780086190663, -1.708577240476017, -2.501235161201205, -0.025430737405497283, 1.3329533835515732, 1.0411037898553221, -1.5556506035092816, -1.0681707029379752, 1.0383742889180834, 0.5781144818749295, -2.011330091904933, -1.0536207427708781, 4.128605023217576, 0.5467437058645215, 3.0037023743142135, -1.2763614904034533, -1.8302608102513378, -1.8028262103041115, 1.8874594535365534, -1.6875912555948043, -2.110638267244946, -3.262231295303651, 0.13697632638656954, 0.7504405354169796, -0.4473455702711375, 2.881542040809076, -0.827829310262767, 2.8163566030277947, 0.3296379525026226, -1.5332057620602806, 2.0538158893661427, -0.169229995747179, -1.903217701288021, -3.073236357981753, -0.03894625872002003, -0.5266074374083847, -0.2639224745894115, 0.7346836270621371, 0.8491243645069204, 0.8617794208000472, -0.12929157215535125, -1.1325472505124454, -1.3811401299851167, 0.08172479616053152, 2.183924475949394, 0.08274098791291604, -0.4811784401205908, 0.057091700608864926, -0.07516804934575746, 3.1220428234632314, 0.20418712681158174, -1.1890230966900577, 0.41773208330058753, 0.9051672438953647, 4.339974166671972};

	// ####################### 使用 Face Hunter卡组进行训练，针对GameTreePruneBestMove进行优化，搜索深度 depth=2, 优化过程来看，胜率很难超过50%，似乎深度深的确实是要厉害一些？但是人对战的时候感觉不出来##########################
	// 下面这些depth=2训练得到的模型，人对战的时候也很容易打败，可能是这个卡组里非随从的因素太多了，比如有很多 deathrattle，这个该如何优化呢？需要跨turn的长远考虑？？
	// iterNum=15, bestPara, 针对默认GameStateValue胜率 67.5%
//	double[] parWeight = {0.2765475019996606, 0.44154195571355326, -0.5713816835762187, 0.8279533867392488, 0.8140971181186827, 0.7090696871842791, 0.14531835118634348, -1.2429049027163495, -1.6581010208160618, 0.13191986058444427, 0.571346580480568, 1.2139001507755958, -0.15244004154041133, 0.43898226447035654, -1.4067557992300337, 0.9054735926866976, -0.33325925488616026, -0.6187424848306624, -0.22540838471219155, 0.12450901143323688, -1.2396300589612874, -0.011768590362528808, 0.9490235749520085, 0.3783569856964683, 0.5728031532748963, -0.387868993100444, -0.7063647920549527, 0.5762187981440408, 0.4873409965843165, 0.4127046436097013, 0.2942266113975308, -2.215217681152735, 0.28636519235206415, -0.022419018823421615, -0.28879853169605385, -0.5202440589407928, -0.1128209586409644, 1.7414120624134135, 0.6519827693568037, -0.5084214985368135, 0.15694828598952118, -0.8694706385230488, -1.384136728424329, -0.3630140452923586, 0.6744635787051328, -0.18938881204451039, 0.3709014985044459, 0.7901629868937532, 1.9728381006982167, -0.05588952361988399, 0.7772551939923646, 1.8093096956945884, -0.8762103611496007, -1.405287679361499, -0.46551490474420865, 0.34612498402889463, 0.5432286916985303, -0.08057460947690795, -0.06647718307809886, -0.048294827275354085, -1.3354670962572521, -0.9685135733962628, -0.30300695978974534, -0.8212227148282203, 0.7180752610541414, -0.2024709639824498, 1.6629965052406126, -0.5665297176460854, -0.14251774500403025, -0.694649158476175, 1.1222828811132417, 1.008118843453089, -0.14837471118601808, 1.6831285895398485, -0.29304933766016594, 0.4582157629058334, -0.03300058796199412, -0.0406860287174146, 0.16146935593792955, -0.2734929722319722, -1.378880649640629, 0.33503256178044316, -0.3331705617534934, 0.6309395290206554, -0.4004648411581168, 1.0193217392494118, -0.14291423154502012, -0.2751109110770443};
	// iterNum=22, bestPara, 针对默认GameStateValue胜率 68.5%， 对 GameTreePruneBestMove 胜率 48%
//	double[] parWeight = {0.2524394989109993, 0.41134001139229787, -0.5681542675872762, 0.6482141447402523, 0.6531874582716248, 0.7221282553692704, 0.45357516941265646, -1.2264809964072234, -1.640293624463009, 0.4558621345812771, 0.7384344387282143, 1.2804467353474849, -0.20207486734699884, 0.21359547736129197, -1.4121754594723848, 0.8921564261354069, -0.10107125770200245, -0.7493446317882211, -0.21453153245673, 0.11259592477539106, -1.2837809730098122, 0.11007151837792446, 1.0533921322653497, 0.39420263653407045, 0.11395812055160537, -0.36473824986004655, -0.7501965573337845, 0.648412698696047, 0.43549993762459666, 0.37856902523652314, 0.19724692052496715, -2.1653425815864717, 0.2782878879837828, -0.01568047971566036, -0.09948222621495635, -0.423920678235303, -0.15192147179686244, 1.0083846743849725, 0.5602811965498233, -0.47487494061698043, 0.11023881980003594, -0.8804225455302561, -1.4569014578656232, -0.37564726423285616, 0.7891934202249964, -0.2637669511683069, 0.4322186004653596, 0.7617240457827607, 1.967407923086838, -0.09621777804277623, 0.6418267688269603, 1.7677291965486883, -0.8918272845408531, -1.56784043745362, -0.4704816154826961, 0.07064959204828865, 0.49042996087647045, -0.12981804322949866, -0.036255198168886255, 0.18332029442580433, -1.2911476600489353, -0.9359895965515169, -0.29396355175980404, -0.6202354405993347, 0.7408843077190358, -0.19763227388055735, 2.2028618781720626, -0.6573372843931489, -0.15781595084173264, -0.41970207767363543, 0.6441671727446571, 0.8540624054108144, -0.043811470076487447, 1.5969655979847106, -0.31528870617380467, 1.2042554446410132, -0.08533728969626142, -0.008103811024184608, 0.013191681256660974, -0.28479608025747744, 0.3438321894898675, 0.38976222046292786, -0.17821639935790523, 0.313392442007916, -0.32320618008645996, 1.0483234550182272, -0.03484760361941316, -0.14663836021207444};
    // iterNum=34, bestPara, 针对默认GameStateValue胜率 66%， 对 GameTreePruneBestMove 胜率 52.5%
//	double[] parWeight = {0.2644292847769364, 0.4113541965230256, -0.563066597248275, 0.6624708654613201, 0.7029860191750219, 0.6932604613236975, 0.40998478801887384, -1.2252924572366282, -1.677913403146996, 0.5695806446647416, 0.8049229996698299, 1.2618118984804703, -0.17474865103419543, 0.18398873484905554, -1.412569657185833, 0.8871069537624596, -0.12805111611456707, -0.7035074688440739, -0.2987811621665228, 0.11403656521910048, -1.2876549595304385, 0.08463522602163337, 1.0605331435251826, 0.39206200867435387, 0.2189962915690221, -0.3075161322809697, -0.7672543861181945, 0.6484000592868457, 0.49958005114710147, 0.06457224592126888, 0.06559111342383654, -2.089452951995767, 0.27590939239708256, -0.015726640708564932, -0.10634151251760245, -0.3917225971251818, -0.14993631134271324, 0.9935099835910411, 0.5462566341435716, -0.47494293716746405, 0.11106633331402398, -0.8771981614978676, -1.44621035246547, -0.37533364014091025, 0.7594690556023012, -0.2461728455517989, 0.4427427677700903, 0.7512190152683325, 1.9673293848717957, -0.09666751501356004, 0.665944397541629, 1.7809880399299718, -0.894113445040283, -1.666811118312994, -0.47111533063949174, 0.07127824936144275, 0.4948084980113793, -0.15066090990745792, 7.105832161689895E-4, 0.19526284376134315, -1.259652856997251, -0.9458984574632121, -0.2951607883936225, -0.7016401407868703, 0.7376805037724873, -0.1976168596269961, 2.340141802878466, -0.6550591909978678, -0.10025359951072052, -0.43517929010842565, 0.5699370351591722, 0.7980007625588272, 0.045208570096480535, 1.7405756030928496, -0.23325903756039412, 0.8861015122038549, -0.10379929999963945, -0.005276566242009153, 0.04684888801187037, -0.2845960398509292, 1.1481506523783083, 0.3906324740221086, -0.19355679468421874, 0.2865791726013933, -0.21187279932238862, 1.1300224657208007, -0.054785344430992845, -0.21922411658099317};

	private final static Logger logger = LoggerFactory.getLogger(GameTreeBestMove.class);
	private final IGameStateHeuristic heuristic;

	public GameTreeBestMove(IGameStateHeuristic heuristic) {
		this.heuristic = heuristic;
	}

	@Override
	public String getName() {
		return "Game Tree Best Move";
	}

	@Override
	public List<Card> mulligan(GameContext context, Player player, List<Card> cards) {
		List<Card> discardedCards = new ArrayList<Card>();
		for (Card card : cards) {
			if (card.getBaseManaCost() >= 4 || card.getCardId()=="minion_patches_the_pirate") {  //耗法值>=4的不要, Patches the Pirate这张牌等他被触发召唤
				discardedCards.add(card);
			}
		}
		return discardedCards;
	}

	private static int calculateThreatLevel(GameContext context, int playerId) {
		int damageOnBoard = 0;
		Player player = context.getPlayer(playerId);
		Player opponent = context.getOpponent(player);
		for (Minion minion : opponent.getMinions()) {
			damageOnBoard += minion.getAttack(); // * minion.getAttributeValue(Attribute.NUMBER_OF_ATTACKS); (暂时没有考虑风怒、冻结等的影响)
		}
		damageOnBoard += getHeroDamage(opponent.getHero());  //对方随从 + 英雄的攻击力

		int remainingHp = player.getHero().getEffectiveHp() - damageOnBoard;  // 根据减去对方伤害后我方剩余血量来确定威胁等级
		if (remainingHp < 1) {
			return 2;
		} else if (remainingHp < 15) {
			return 1;
		}
		return 0;
	}

	private static int getHeroDamage(Hero hero) {
		int heroDamage = 0;
		if (hero.getHeroClass() == HeroClass.MAGE) {
			heroDamage += 1;
		} else if (hero.getHeroClass() == HeroClass.HUNTER) {
			heroDamage += 2;
		} else if (hero.getHeroClass() == HeroClass.DRUID) {
			heroDamage += 1;
		} else if (hero.getHeroClass() == HeroClass.ROGUE) {
			heroDamage += 1;
		}
		if (hero.getWeapon() != null) {
			heroDamage += hero.getWeapon().getWeaponDamage();
		}
		return heroDamage;
	}

	private double evaluateContext(GameContext context, int playerId) {
		Player player = context.getPlayer(playerId);
		Player opponent = context.getOpponent(player);
		if (player.getHero().isDestroyed()) {   // 己方被干掉，得分 负无穷
			return Float.NEGATIVE_INFINITY;  // 正负无穷会影响envState的解析，如果要加的话可以改成 +-100之类的
		}
		if (opponent.getHero().isDestroyed()) {  // 对方被干掉，得分 正无穷
			return Float.POSITIVE_INFINITY;
		}
		List<Integer> envState = player.getPlayerState();
		envState.addAll(opponent.getPlayerState());

		// 威胁等级标识特征
		int threatLevelHigh= 0;
		int threatLevelMiddle = 0;
		int threatLevel = calculateThreatLevel(context, playerId);
		if(threatLevel == 2){
			threatLevelHigh = 1;
		}else if(threatLevel == 1){
			threatLevelMiddle = 1;
		}
		envState.add(threatLevelHigh);
		envState.add(threatLevelMiddle);

		double score = 0;
		for (int i = 0; i < parWeight.length; i++){
			score += parWeight[i]*envState.get(i);
		}
		return score;
	}

	@Override
	public GameAction requestAction(GameContext context, Player player, List<GameAction> validActions) {

		if (validActions.size() == 1) {  //只剩一个action一般是 END_TURN
			return validActions.get(0);
		}

		int depth = 2;
		// when evaluating battlecry and discover actions, only optimize the immediate value （两种特殊的action）
		if (validActions.get(0).getActionType() == ActionType.BATTLECRY) {
			depth = 0;
		} else if (validActions.get(0).getActionType() == ActionType.DISCOVER) {  // battlecry and discover actions一定会在第一个么？
			return validActions.get(0);
		}

		GameAction bestAction = validActions.get(0);
		double bestScore = Double.NEGATIVE_INFINITY;

		for (GameAction gameAction : validActions) {
			double score = alphaBeta(context, player.getId(), gameAction, depth);  // 对每一个可能action，使用alphaBeta递归计算得分
			if (score > bestScore) {
				bestAction = gameAction;
				bestScore = score;
			}
		}
		return bestAction;
	}

	private double alphaBeta(GameContext context, int playerId, GameAction action, int depth) {
		GameContext simulation = context.clone();  // clone目前环境
		simulation.getLogic().performGameAction(playerId, action);  // 在拷贝环境中执行action
		if (depth == 0 || simulation.getActivePlayerId() != playerId || simulation.gameDecided()) {  // depth层递归结束、发生玩家切换（我方这轮打完了）或者比赛结果已定时，返回score
			return evaluateContext(simulation, playerId);
		}

		List<GameAction> validActions = simulation.getValidActions();  //执行完一个action之后，获取接下来可以执行的action

		double score = Float.NEGATIVE_INFINITY;

		for (GameAction gameAction : validActions) {
			score = Math.max(score, alphaBeta(simulation, playerId, gameAction, depth - 1));  // 递归调用alphaBeta，取评分较大的
			if (score >= 100000) {
				break;
			}
		}
		return score;
	}

}
